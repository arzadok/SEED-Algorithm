/*
  This module is the core of the algorithm, it gets the 128-bit Plaintext and the two 32-bit sub-Keys.
  A 128-bit Plaintext block of the Feistel_Network is divided into two 64-bit blocks(L, R),
  and the right 64-bit blok is an input to the round function F, with a 650bit subkey generated by the Key schedule. 
  L is the most significant 64-bit of 128-bit input, and R is the least significant 64-bit.
*/
module Feistel_Network
(
input           clk,reset,sync,clk_en,
input           start_f,
input  [3:0]    Rounds,
input  [127:0]  plaintext,
input  [31:0]   ki_0,
input  [31:0]   ki_1,
output [127:0]  ciphertext,
output out_en
);

//Input signals
wire [63:0] L0,R0;

//Inner signals
wire [63:0] B2F,B2A,A2X,X2B,F2X; 


assign L0  = plaintext[127:64];
assign R0  = plaintext[63:0];

//Design Hierarchy

B dutB
(
.clk     (clk)  , 
.reset   (reset), 
.sync    (sync), 
.clk_en  (clk_en),
.start_f (start_f),
.Rounds  (Rounds), 
.begin_B (R0), 
.input_B (X2B),
.output_end (B2A), 
.output_F   (B2F)
);

A dutA
(
.clk     (clk)  , 
.reset   (reset), 
.sync    (sync), 
.clk_en  (clk_en),
.start_f (start_f),
.Rounds  (Rounds), 
.begin_A (L0), 
.input_A (B2A), 
.output_xor(A2X)
);

F dutF
(
.clk     (clk)  , 
.reset   (reset), 
.sync    (sync), 
.clk_en  (clk_en),
.start_f (start_f),
.R_i     (B2F), 
.Key_i_0 (ki_0), 
.Key_i_1 (ki_1), 
.F_out   (F2X)
);

FN_O dutfn_o
(
.clk        (clk)  ,
.reset   (reset), 
.clk_en  (clk_en),
.Rounds     (Rounds)  , 
.R          (B2A), 
.L          (X2B), 
.ciphertext (ciphertext),
.out_en     (out_en)
);


assign X2B  = F2X ^ A2X;


endmodule






























